# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main", "dev"]
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches: ["main", "dev"]
  release:
    types: [created, published]

jobs:
  valgrind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y valgrind
      - name: Build
        run: cmake -B build -DTEST=true -DCURL=false  -DCMAKE_BUILD_TYPE=Debug -S . && cd build && make && cd ..
      - name: Run Valgrind on all test binaries
        run: |
          echo "# Valgrind Memory Check Results" > valgrind_summary.md
          echo "" >> valgrind_summary.md
          EXIT_CODE=0

          for test_binary in ./build/test/unittests/test_*; do
            if [ -x "$test_binary" ]; then
              echo "Running valgrind on $test_binary"
              TEST_NAME=$(basename "$test_binary")
              
              # Create a temporary file for valgrind output
              TEMP_OUTPUT=$(mktemp)
              
              # Run valgrind and capture both stdout and stderr
              valgrind --leak-check=full --error-exitcode=1 --track-origins=yes "$test_binary" 2>&1 | tee "$TEMP_OUTPUT"
              VALGRIND_STATUS=${PIPESTATUS[0]}
              
              # Extract valgrind-specific messages (lines starting with ==)
              VALGRIND_MESSAGES=$(grep -E "^==[0-9]+== " "$TEMP_OUTPUT" || true)
              
              if [ $VALGRIND_STATUS -ne 0 ]; then
                EXIT_CODE=1
                echo "❌ $TEST_NAME: memory issues found:" >> valgrind_summary.md
                echo '```' >> valgrind_summary.md
                # First show the test output without valgrind messages
                grep -vE "^==[0-9]+== " "$TEMP_OUTPUT" >> valgrind_summary.md || true
                echo "" >> valgrind_summary.md
                # Then show the valgrind messages
                echo "$VALGRIND_MESSAGES" >> valgrind_summary.md
                echo '```' >> valgrind_summary.md
                echo "" >> valgrind_summary.md
              else
                echo "✅ $TEST_NAME: no memory issues detected" >> valgrind_summary.md
              fi
              
              # Clean up temp file
              rm "$TEMP_OUTPUT"
            fi
          done

          cat valgrind_summary.md >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

      - name: Analyze Stack Usage for test_verify_logs
        run: |
          set -x  # Enable debug output
          echo "# Memory Analysis for test_verify_logs" > memory_analysis.md
          echo "" >> memory_analysis.md
          echo "## Memory Usage Summary" >> memory_analysis.md
          echo '```' >> memory_analysis.md

          # Run massif with more detailed options
          valgrind --tool=massif \
            --detailed-freq=1 \
            --max-snapshots=100 \
            --threshold=0.1 \
            --stacks=yes \
            --pages-as-heap=yes \
            --heap=yes \
            --massif-out-file=massif.out \
            ./build/test/unittests/test_verify_logs

          # Wait a moment and verify the file exists
          sleep 2
          ls -l massif.out || true

          # Extract peak heap size from massif output with more detailed parsing
          {
            echo "=== Peak Heap Usage ==="
            # First try the detailed peak snapshot
            if ms_print massif.out | grep -A 5 "Detailed snapshot" > detailed_snapshot.txt; then
              PEAK_MEM=$(awk '/total heap usage:/ {print $4 " bytes"}' detailed_snapshot.txt)
              if [ ! -z "$PEAK_MEM" ]; then
                echo "$PEAK_MEM"
              else
                # Fallback to peak heap total
                ms_print massif.out | awk '/peak heap total:/ {print $4 " bytes"}' || echo "Could not determine peak heap usage"
              fi
            else
              echo "Could not find detailed snapshot information"
            fi
            echo ""
          } >> memory_analysis.md

          # Run memcheck specifically for stack analysis
          valgrind --tool=memcheck \
            --track-origins=yes \
            --max-stackframe=8388608 \
            --main-stacksize=8388608 \
            --log-file=memcheck.out \
            --verbose \
            --trace-children=yes \
            ./build/test/unittests/test_verify_logs

          # Extract stack size information with improved parsing
          {
            echo "=== Stack Usage ==="
            # Try multiple patterns to find stack information
            if grep -q "Stack size below" memcheck.out; then
              grep -E "Stack size below" memcheck.out | sed 's/.*below: //'
            elif grep -q "using --main-stacksize=" memcheck.out; then
              grep -E "using --main-stacksize=" memcheck.out | sed 's/.*using --main-stacksize=/Maximum stack size: /'
            elif grep -q "max-stackframe" memcheck.out; then
              grep -E "max-stackframe" memcheck.out | sed 's/.*max-stackframe=/Current stack frame: /'
            else
              # Last resort: try to find any stack-related information
              grep -i "stack" memcheck.out | grep -v "vgstack" || echo "No stack information available"
            fi
            echo ""
          } >> memory_analysis.md

          echo '```' >> memory_analysis.md

          echo "## Raw Memory Information" >> memory_analysis.md
          echo '```' >> memory_analysis.md
          {
            echo "=== Massif Raw Output ==="
            ms_print massif.out | head -n 50
            echo ""
            echo "=== Memcheck Raw Output ==="
            head -n 50 memcheck.out
          } >> memory_analysis.md
          echo '```' >> memory_analysis.md

          # Always try to write to summary
          cat memory_analysis.md >> $GITHUB_STEP_SUMMARY || true

          # Exit successfully since this is an analysis step
          exit 0

  code_coverage:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4.2.2

      - name: Build Project
        uses: threeal/cmake-action@v2.0.0
        with:
          options: TEST=true CURL=false CMAKE_BUILD_TYPE=Debug COVERAGE=true

      - name: Test Project
        uses: threeal/ctest-action@v1.1.0
        with:
          test-dir: build/test/unittests

      - name: Check Test Coverage
        uses: threeal/gcovr-action@v1.1.0
        with:
          excludes: libs.* build.* test.* src.cli.*
          xml-out: coverage.xml

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both
          thresholds: "30 50"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DTEST=true
          -DCURL=false
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest  --output-junit junit_output.xml --output-on-failure --build-config ${{ matrix.build_type }}

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
          path: build/bin

      # Create release artifact for tagged versions
      - name: Create Release Archive
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd build/bin
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ../../colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.zip .
          else
            tar -czf ../../colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.tar.gz .
          fi
        shell: bash

      # Upload to release if this is a tag
      - name: Upload Release Artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.zip
            colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: ${{ steps.strings.outputs.build-output-dir }}/junit_output.xml
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

#    - name: Upload Test Results
#      uses: dorny/test-reporter@v1
#      if: success() || failure()
#      with:
#        name: ctest-results
#        path: ${{ steps.strings.outputs.build-output-dir }}/junit_output.xml
#        reporter: java-junit
#      env:
#        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
