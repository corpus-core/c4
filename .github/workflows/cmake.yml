# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main", "dev"]
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches: ["main", "dev"]

jobs:
  valgrind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y valgrind
      - name: Build
        run: cmake -B build -DTEST=true -DCURL=false  -DCMAKE_BUILD_TYPE=Debug -S . && cd build && make && cd ..
      - name: Run Valgrind on all test binaries
        run: |
          echo "# Valgrind Memory Check Results" > valgrind_summary.md
          echo "" >> valgrind_summary.md
          EXIT_CODE=0

          for test_binary in ./build/test/unittests/test_*; do
            if [ -x "$test_binary" ]; then
              echo "Running valgrind on $test_binary"
              TEST_NAME=$(basename "$test_binary")
              
              # Create a temporary file for valgrind output
              TEMP_OUTPUT=$(mktemp)
              
              # Run valgrind and capture both stdout and stderr
              valgrind --leak-check=full --error-exitcode=1 --track-origins=yes "$test_binary" 2>&1 | tee "$TEMP_OUTPUT"
              VALGRIND_STATUS=${PIPESTATUS[0]}
              
              # Extract valgrind-specific messages (lines starting with ==)
              VALGRIND_MESSAGES=$(grep -E "^==[0-9]+== " "$TEMP_OUTPUT" || true)
              
              if [ $VALGRIND_STATUS -ne 0 ]; then
                EXIT_CODE=1
                echo "❌ $TEST_NAME: memory issues found:" >> valgrind_summary.md
                echo '```' >> valgrind_summary.md
                # First show the test output without valgrind messages
                grep -vE "^==[0-9]+== " "$TEMP_OUTPUT" >> valgrind_summary.md || true
                echo "" >> valgrind_summary.md
                # Then show the valgrind messages
                echo "$VALGRIND_MESSAGES" >> valgrind_summary.md
                echo '```' >> valgrind_summary.md
                echo "" >> valgrind_summary.md
              else
                echo "✅ $TEST_NAME: no memory issues detected" >> valgrind_summary.md
              fi
              
              # Clean up temp file
              rm "$TEMP_OUTPUT"
            fi
          done

          cat valgrind_summary.md >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

      - name: Analyze Stack Usage for test_verify_logs
        run: |
          # Create directory for detailed reports
          mkdir -p memory-analysis

          # Run massif for heap analysis
          valgrind --tool=massif \
            --detailed-freq=1 \
            --max-snapshots=100 \
            --threshold=0.1 \
            --stacks=yes \
            --pages-as-heap=yes \
            --heap=yes \
            --massif-out-file=massif.out \
            ./build/test/unittests/test_verify_logs

          # Run memcheck for stack analysis
          valgrind --tool=memcheck \
            --track-origins=yes \
            --max-stackframe=8388608 \
            --main-stacksize=8388608 \
            --log-file=memcheck.out \
            --verbose \
            --trace-children=yes \
            ./build/test/unittests/test_verify_logs

          # Generate full massif report
          ms_print massif.out > memory-analysis/massif-full-report.txt

          # Create summary for GitHub
          {
            echo "# Memory Analysis Summary"
            echo ""
            echo "## Peak Heap Usage"
            echo '```'
            ms_print massif.out | grep -m 1 "peak heap total:" || echo "Could not determine peak heap usage"
            echo '```'
            echo ""
            echo "## Stack Frame Size"
            echo '```'
            grep -m 1 "max-stackframe=" memcheck.out | sed 's/.*max-stackframe=/Current stack frame: /' || echo "Could not determine stack frame size"
            echo '```'
          } > memory_summary.md

          # Save detailed logs
          cp memcheck.out memory-analysis/
          cp massif.out memory-analysis/

          # Write summary to GitHub step summary
          cat memory_summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Memory Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: memory-analysis-reports
          path: memory-analysis
          if-no-files-found: error

  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Clang Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tools clang

      - name: Configure CMake with Scan-Build
        run: |
          mkdir -p build
          cd build
          scan-build cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DTEST=true -DCURL=false ..

      - name: Run Scan-Build
        id: scan-build
        run: |
          cd build
          # Create a directory for the results
          mkdir -p scan-build-results
          # Run scan-build with explicit output directory and use -v for verbose output
          scan-build --status-bugs -v -o scan-build-results make 2>&1 | tee scan-build-output.txt || true

          # Store the scan-build exit code
          SCAN_EXIT_CODE=${PIPESTATUS[0]}

          # Check if any results were generated and parse them
          if [ -n "$(ls -A scan-build-results 2>/dev/null)" ]; then
            echo "Analysis results found"
            echo "results_found=true" >> $GITHUB_OUTPUT
            
            # Create a summary of the issues
            echo "## 🔍 Static Analysis Issues" > analysis_summary.md
            echo "" >> analysis_summary.md
            
            # Find the report directory (it's usually named something like scan-build-2024-XX-XX-*)
            REPORT_DIR=$(ls -d scan-build-results/* | head -n 1)
            
            # Parse and format each issue from the HTML files
            for report in $REPORT_DIR/*.html; do
              if [ -f "$report" ]; then
                # Extract issue information using grep and sed
                ISSUE_TYPE=$(grep -A 1 "<!-- BUGTYPE" "$report" | tail -n 1 | sed 's/<[^>]*>//g' | xargs)
                ISSUE_DESC=$(grep -A 1 "<!-- BUGDESC" "$report" | tail -n 1 | sed 's/<[^>]*>//g' | xargs)
                ISSUE_FILE=$(grep -A 1 "<!-- FILEPATH" "$report" | tail -n 1 | sed 's/<[^>]*>//g' | xargs)
                ISSUE_LINE=$(grep -A 1 "<!-- FUNCTIONLINE" "$report" | tail -n 1 | sed 's/<[^>]*>//g' | xargs)
                
                echo "### ⚠️ $ISSUE_TYPE" >> analysis_summary.md
                echo "- **Description**: $ISSUE_DESC" >> analysis_summary.md
                echo "- **Location**: $ISSUE_FILE:$ISSUE_LINE" >> analysis_summary.md
                echo "" >> analysis_summary.md
              fi
            done
            
            # Save the summary for the next step
            mv analysis_summary.md ../analysis_summary.md
            
            # List the results for debugging
            echo "Contents of scan-build-results:"
            ls -la scan-build-results/
            
            # Exit with the scan-build status code
            exit $SCAN_EXIT_CODE
          else
            echo "No issues found by static analysis"
            echo "results_found=false" >> $GITHUB_OUTPUT
            echo "## ✅ Static Analysis Results" > ../analysis_summary.md
            echo "" >> ../analysis_summary.md
            echo "No issues found by static analysis." >> ../analysis_summary.md
          fi

      - name: Generate Analysis Summary
        if: always()
        run: |
          {
            # Include the analysis summary
            cat analysis_summary.md
            
            echo "" 
            echo "### 🔄 Build Output" 
            echo '```'
            cat build/scan-build-output.txt
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-report
          path: build/scan-build-results
          if-no-files-found: warn

  code_coverage:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4.2.2

      - name: Build Project
        uses: threeal/cmake-action@v2.0.0
        with:
          options: TEST=true CURL=false CMAKE_BUILD_TYPE=Debug COVERAGE=true

      - name: Test Project
        uses: threeal/ctest-action@v1.1.0
        with:
          test-dir: build/test/unittests

      - name: Check Test Coverage
        uses: threeal/gcovr-action@v1.1.0
        with:
          excludes: libs.* build.* test.* src.cli.*
          xml-out: coverage.xml
          html-details: build/coverage-report/index.html
          html-title: "Colibri Coverage Report"

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both
          thresholds: "30 50"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage-report
          if-no-files-found: error

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          message: |
            ## Coverage Report
            ${{ steps.coverage.outputs.message }}

            [View detailed coverage report](../actions/runs/${{ github.run_id }}/artifacts)

            <details>
            <summary>Coverage Details</summary>
            $(cat code-coverage-results.md)
            </details>
          path: code-coverage-results.md

      - name: Write to Job Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View detailed coverage report](../actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DTEST=true
          -DCURL=false
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest  --output-junit junit_output.xml --output-on-failure --build-config ${{ matrix.build_type }}

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
          path: build/bin

      # Create release artifact for tagged versions
      - name: Create Release Archive
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p release-artifacts
          cd build/bin
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ../../release-artifacts/colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.zip ./*
            # Verify the zip was created
            if [ ! -f "../../release-artifacts/colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.zip" ]; then
              echo "Error: ZIP file was not created"
              exit 1
            fi
          else
            tar -czf ../../release-artifacts/colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.tar.gz ./*
            # Verify the tar.gz was created
            if [ ! -f "../../release-artifacts/colibri-${{ matrix.os }}-${{ matrix.c_compiler }}.tar.gz" ]; then
              echo "Error: TAR.GZ file was not created"
              exit 1
            fi
          fi
          # List the contents of release-artifacts for verification
          ls -la ../../release-artifacts/
        shell: bash

      - name: Upload Build Artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: cmake-release-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: release-artifacts/*
          if-no-files-found: error

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: (success() || failure()) && matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' # only run for ubuntu-latest with clang
        with:
          report_paths: ${{ steps.strings.outputs.build-output-dir }}/junit_output.xml
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

#    - name: Upload Test Results
#      uses: dorny/test-reporter@v1
#      if: success() || failure()
#      with:
#        name: ctest-results
#        path: ${{ steps.strings.outputs.build-output-dir }}/junit_output.xml
#        reporter: java-junit
#      env:
#        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

permissions:
  contents: write
  checks: write
  pull-requests: write
  actions: read
